FarmHandReadMe -


This application is built as a demonstration of ability in Java for consideration by future employers. It is my first solo application built from scratch, and is built while juggling a life filled with full time employment, family, and continued education in order to make a career change. 

It is designed at this time as a standalone desktop app to be accessed in person from a central terminal in a common area.

The application's goal is to serve as a means to help a small team manage tasks on a small scale or hobby farm.

Functionality to include but not limited to; weather observation, planning tasks in accordance with weather conditions, monitoring progress and completion of tasks. As well, there will be functionality for basic messaging between team members.

The following is journal of how this came to be. Thank you for reading this and for checking out the project. Cheers!
===========================================================

- 20 Nov 2021 -
New notation scheme 
** == done  
>> == to do

Uploading version to git 
-------------------------------------------------------------------------------------
** DB is now written directly into project instead of on an absolute path limiting what system program operates from without changing values.

** If written for specific client and none other it would be written to a specific file path and makes program unusable to others? 
-----------------------------------------------------------------------------------------

>> create new scenes for instructions

>> look into rewriting controllers for more efficient use insteaad of being replicated

>> FXML to be arranged so user interaction is seperate and thereby allows inclusion in all additional scenes
including instructions

>> error pages and quantifiers

>> handle exceptions

>> package program

>> Desired FXML for stations non functional can not load new stage, either a 400 error as api does not have a location to call  >> work out other functionality in scene change leave stations as you had it just include new stations page without label 

>> adjust gui to be the same across any platform regardless of size
------------------------------------------------------------


- 15 Nov 2021 -

>> DB columns now appear By order of last entered perhaps, still sortable ?

>> FXML to be arranged so user interaction is seperate and thereby allows inclusion in all additional scenes
including instructions

>> error pages and quantifiers

>> handle exceptions

>> identify system and write db in safe area

>> package program

>> Desired FXML for stations non functional can not load new stage, either a 400 error as api does not have a location to call  >> work out other functionality in scene change leave stations as you had it just include new stations page without label 
-----------------------------------------------------------
- 14 Nov 2021 -

!!Stations failure >> no longer populating label as desired back to drawing board

>> Stations functioning as intended and now logs displayed conditions, displays logs and gets observations.

>>tweaked observations a bit more time for real world trial

>> next might be making sure latest reading is always at top

>> followed by clean up

>> followed by possible validation for bad data entered

>> work backed up among drives git upload to follow shortly

“Say now... You better straighten up and fly right!”
-- Leonard Lee Dill
-----------------------------------------------------------

- 13 Nov 2021 -

Updated a bit of Stations FXML and current condiotions from stations class now log to the database as well

>> future implementations will included viewing the logs 
and getting observations

>> observations class also needs a little bit of work determining rising falling and unsettled
-----------------------------------------------------------

- 11 Nov 2021 -

>> implementation of new fxml method
>> adjusment of fxml items
-----------------------------------------------------------

- 10 Nov 2021 -

>>Created weather class to house scene change method and any other repetitive methods that need to be called into a controller
>>reformatted scene change method to accept string and mouse event
>> reformatted scene change method to house local variables in the method for position x and y
>> operating as desired so far
-----------------------------------------------------------

- 9 Nov 2021 -

-created method for setting stage
>> need to gather all fxml into singular package for a non muddled integration
>> be prepared that you are most likely about to break a fair bit of your code, but this should eliminate 21 lines of code where used
>> unable to acheive desired results as method containing scene change must have a file name put in and still be able to be called a mouse event, where as method that opens and closes stage hard codes the fxml. Will take a bit more work.
>> main stage is no longer moveable but weather stage and all scenes contained are. Intention is for more of an experience of main stage being anchored while extra stage can be moved out of the way to view windows in background.
>> Would like to possibly play with the whole window being resizeable.
>> Will play around with visual formatting of gui and then see about logging data provided from the called weather api. Feels like its starting to get ready to present. 
-----------------------------------------------------------


- 8 Nov 2021 -

- primary stage is now dragable around screen not sure if this is the implementation I want yet or not
-----------------------------------------------------------
- 2 Nov 2021 -

 Just need some initialization work to get observations to display as intended.

Updated criteria for stormy, hot and dry, improving, detiorating.

Formatted text

included error messages for bad input, insufficient number of entries in instruments.

include errors for leaving fields blank or  garbage
>> try writing as regular expressions

Next to include attempts to test, optimize, display on different screen sizes, write db to a location neutral to type of system,  clean code and check for best practices

Current state of code to be pushed to GIT 
  
------------------------------------------------------------
- 1 Nov 2021 -

Adjusted hotAndDryDefinitiion() and humidityDefinition()
in Observations.

Adjusted improvingDefinition() and detioratingDefinition()
in Observations.
  
------------------------------------------------------------

- 27 Oct 2021 -

Definitions for observations logic(ie. rising, falling, hot, cold, windy etc.)
  
------------------------------------------------------------
- 22 Oct 2021 -

All tables now display as they should, next clean, style and observations logic. Feels pretty good. Cheers!  
------------------------------------------------------------

- 20 Oct 2021 -

HourlyDB is displaying now in tableview as it should. Next Rinse and repeat for other 2 tables, clean up, and begin observations logic.  

-----------------------------------------------------------

- 10 Oct 2021 - 

All tables have observable columns and writing to database methods cleared of anomalies.

Next steps to include building out classes properly and attempting to display once more.


- 30 Sept 2021 -

Much research into displaying data some work put into restructuring methods into more suitable classes. Efforts are to streamline before displaying.

Dayjob finally starting to slow for the year and so hoping for more available time to renew efforts in development.
------------------------------------------------------------
- 22 Aug 2021 -

Created method that selects all timestamps from hourly table and converts them into an observable array list of human readable times. Goal is to then bind list to the appropriate column.

Wish me luck.
------------------------------------------------------------

- 21 Aug 2021 -

Repository updated, pushed to version, merged to master.

Began creating fxml file to display database after logging an entry.

Sorted through one more possible means to save useable formatted date. Results unsatifactory.

Next step will include calling time from tables and converting each entry to user readable, storing in a list and then
populating appropriate column with results stored in list. Hoping to populate remaining columns with a table view or
or queries. Possibly a multi threaded process in order to aide in spead and efficiency. 
------------------------------------------------------------
- 19 Aug 2021 -

Functioning Database! Does what it is supposed to!

Created weekly class and worked out logic for when to write to each table.

Next is a version upload, followed by displaying results in in the gui followed by observations predictions and that will conclude the Weather section of this application for the time being!

But first a celebratory beer!

------------------------------------------------------------


- 17 Aug 2021 -

Date conversion struggle bus was attributed to breaking time (rolling system clock backwards) as well as sequence of calling methods. 

possible fix might be
* compare if logged date is greater than current date,
if so write contents of db up until conflict to new db >>
write conflict properly to new db >> clear old db >> write new db to old db >> clear new db.

Cleaned code and sequence and now to next stage.

------------------------------------------------------------- 


- 16 Aug 2021 -

Seperated out methods and variables between Weather Database
Hourly and Daily classes. 

Created methods for getting highs, lows and avg of any column in any table in the database.

Created Conditionl statements for writing to hourly or daily table.

Program is still struggling with its ability to convert stored longs (timestamps) back into dates accurately for comparison making comparisons as currently implemented unreliable.

Will be subject of accute focus moving forward.

------------------------------------------------------------- 

- 15 Aug 2021 -

Cleaned up code and completed means for comparing current and logged time as dates.

Next is conditional statement and methods for averaging hourly  and writing as daily values to daily table.

Program does not apprecitate system being set in reverse and hangs writing the same entries over and over. >_< 

Do not mess with the flow of time! 
------------------------------------------------------------

- 14 Aug 2021 -

Progress on SQL Database. Variables and methods in place to log to the hourly table and get required information to order to self increment id values and compare time and dates. 

Next will be comparing stored vs current time to determine if it is a new day and if so gather hourly entries and write to daily values for a daily entry before recording more hourly entries.
------------------------------------------------------------

- 12 Aug 2021 -

Development has been greatly hindered due to job hours growing to 13-14 hour days and 6 day weeks. Feels like forever!

Weather DB will be created by application at first start up.

Have found means for getting current time and converting it to easily read format and storing into DB.

Possibilty to streamline database by consolidating date and time columns into single column labeled "timestamp" and then letting application convert into understandable formats for creating following methods for comparison of timestamps.

Next phase to include fleshing out methods for writing to and reading from DB for data manipultaion to finally begin.

Possibilty to streamline past described process by omitting step of writing database to map before comparing data.

Proper SQL queries and storage of variables should eliminate extra step.  

------------------------------------------------------------



- 16 June 2021 -

Created getters and setters in WeatherDB. Gave Parameters to Instruments controller on logButtonReleased and now intruments fields data is captured as variables.

Next will be casting fields as numerlogical data types for comparison (doubles).

Then assigning into a map or array list, followed by calculations and storing to the database.

Also will need to look into validation process. Possibly regular expressions?

Will push changes at next stage.

--------------------------------------------------------

- 15 June 2021 -

Created weather.db in Weather package with corresponding tables (hourly, daily, weekly) in Java. Application will ship with database ready to be written to.

rough sketch of instrument data to database as follows:

enter data into fields >> click log >>
assign field data to variables
all table entries to a map or array list
assign field data to variables
create variable last date and last time 
weather addtodatabase method ()
(if)
 time > last time and date == last date >> 
 add current values as hourly entry
(if not)
all hourly values on a seperate thread calculated and stored to daily variables && all current values stored as hourly entry
(if) 
amount of days stored == 7
values of everyday calculated through weekly methods and store as a weekly entry && daily values stored as new daily entry
(if)
days stored  < 7
add daily entry  

repository updated

--------------------------------------------------------

- 14 June 2021 -

At this time have settled on a SQLite database as a means to gather weather data in a central file. This data will be used to offer suggestions in planning out the days chores and compare past conditions. Should be a relatively simple and lightweight solution since program access is isolated.

Have also begun making notes on how database should be initiated and methods that will call data and populate
fields. 

WeatherDB class has been added to Weather package.

"While the unknown often creates the wall of dread that keeps us from moving forward, it should also be the dangling lure that calls us into the depths."
--------------------------------------------------------

- 10 June 2021 - 

Have begun fleshing out weather database structure and proposed functionality. Looking forward to increased development once life stabilizes a bit.

Also optimized font size for station readout and altered getConditions method for better implementation.

Changes pushed to version branch and merged into Master. 

-----------------------------------------------------------

- 3 June 2021 - 

Api is now called, parsed, formatted and displayed on stations sub window. Whew! Functionality for adding new coordinates and getting a read out from nearest station. Most precise coordinates provides most precise results.

Next steps will be logging conditions to a database and make chore reccomendations based on recorded weather trends.

! Future improvements may include calling a more robust weather api. Perhaps NOAA. Might also include calling coordinates by current ip address to create a sort of auto feature instead of manually entering coordinates.

Respository updated.  

--------------------------------------------------

- 31 May 2021 -

Was not receiving desired results and so began re-evaluting means to parse data from JSON response. New discoveries ARE returning desired results and so formatting of desired data has begun. Hooray!

Next steps will include continued formatting followed by setting the data to a label to be displayed on  "Stations" sub window.

"Never forget those who gave their all in order for us to enjoy what we have today."

-------------------------------------------------------------------------------------------- 

- 27 May 2021 -

Found means to parse returned JSON keys and accompanying data. Next steps will include parsing nested data and formatting. Pushed to repository.

----------------------------------------------------------------------------

-19 May 2021-

Began work on methods for Weather sub window. Started with api inclusion for reading data out of a station. Verified obtaining the field input through print out. Next will be a string variable formatted to accept the field values and insert into the url address used for the API call. 

Following will be parsing the returned JSON keys and applying them to a java map and variables in order to log data to the upcoming weather data base and display conditions.

Have decided to hold off on transferring to GIT hub for source control when I have already started with BitBucket.

Have not seen a great difference in functionality and really appreciate that BitBucket isn't trying to log my every sign in or machine. 

Will begin next day of development work with pushing current build into repository.

-------------------------------------------------------------------------------  

- 18 May 2021 -

Relocation mostly complete. Began adding UI for Stations section and fleshed out more of the functionality.
Will be migrating the project to GitHub from BitBucket in near future as per current industry standard. Would love to see that change.


-------------------------------------------------------------

 - 5 May 2021 -

Implemented web viewer with buttons for switching between online weather services. Created WebServicesController and updated WebServices.fxml

Beginning reasearch on JSON parsing. Plan is to implent
Open Weather Map API for stations section. Then it will be on to creating database for logging weather and comparing data. Followed by methods for observations.

Development will be on hold while relocating.

Happy Cinco de Mayo! Vivo la Mexico!


---------------------------------------------------------

- 4 May 2021 -

Began creating user interface for Weather sub window.
 
// Created InstrumentsFXML, InstrumentsController, ObservationsFXML, WebServicesFXML and WebServicesController.

// Implemented WebServicesFXML and InstrumentsFXML in WeatherController in order to switch displays on Weather SubWindow.

//Added instruction to WeatherCSS

! Continue with implementing webview in WebServices and corresponding buttons !

! Look at creating a method in order to quickly create scene changes !   
 
-------------------------------------------------------
 
- 3 May 2021 -

Base template of GUI completed and uploaded to Repository.

// A Main Window for launching 3 sub-windows for Weather, Chores and Inventory with buttons for selecting sub window and minimize and close. 

// Considering swapping Inventory functionality for basic messaging functionality as database integration will be demonstrated in the application through the other sub sets.

Would still like to develop inventory functionality, but at a later time. 
   
